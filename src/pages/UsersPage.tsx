import React, { useEffect, useState } from "react";
import { listUsers, createUser, modifyUser } from "../api/api";
import { useAuth } from "../context/AuthContext";
import "../App.css";

interface User {
    id: number;
    name: string;
    surname: string;
    email: string;
    phone: string;
}

const UsersPage: React.FC = () => {
    const { token } = useAuth();
    const [users, setUsers] = useState<User[]>([]);

    useEffect(() => {
        const fetchUsers = async () => {
            try {
                const response = await listUsers(token!);
                console.log("üì• RAW listUsers response:", response);

                // 1) Je≈õli backend zwraca obiekt z polem "array"
                if (response?.array && Array.isArray(response.array)) {
                    const mapped: User[] = response.array.map((u: any) => ({
                        id: u.ID,
                        name: u.Name,
                        surname: u.Surname,
                        email: u.Email,
                        phone: u.Phone,
                    }));
                    setUsers(mapped);
                }
                // 2) Je≈õli backend zwraca bezpo≈õrednio tablicƒô [ { ID, Name, ‚Ä¶ }, ‚Ä¶ ]
                else if (Array.isArray(response)) {
                    const mapped: User[] = response.map((u: any) => ({
                        id: u.ID,
                        name: u.Name,
                        surname: u.Surname,
                        email: u.Email,
                        phone: u.Phone,
                    }));
                    setUsers(mapped);
                }
                // 3) W przeciwnym razie ‚Äì prawdopodobnie inna struktura
                else {
                    console.warn("‚ö†Ô∏è Nieoczekiwana struktura odpowiedzi:", response);
                }
            } catch (error) {
                console.error("‚ùå B≈ÇƒÖd pobierania u≈ºytkownik√≥w:", error);
            }
        };

        fetchUsers();
    }, [token]);

    const handleAdd = async () => {
        const email = prompt("Email:");
        const name = prompt("Imiƒô:");
        const surname = prompt("Nazwisko:");
        const phone = prompt("Telefon:");
        if (!email || !name || !surname || !phone) return;

        try {
            // Tutaj wywo≈Çujemy createUser ‚Äì funkcja ta sama zajmie siƒô wstawieniem nag≈Ç√≥wk√≥w:
            //   Token, Email, Phone, Name, Surname
            await createUser(token!, email, phone, name, surname);

            // Po poprawnym dodaniu od≈õwie≈ºamy listƒô
            const updated = await listUsers(token!);
            console.log("üì§ RAW response po dodaniu u≈ºytkownika:", updated);

            if (updated?.array && Array.isArray(updated.array)) {
                const mapped: User[] = updated.array.map((u: any) => ({
                    id: u.ID,
                    name: u.Name,
                    surname: u.Surname,
                    email: u.Email,
                    phone: u.Phone,
                }));
                setUsers(mapped);
            } else if (Array.isArray(updated)) {
                const mapped: User[] = updated.map((u: any) => ({
                    id: u.ID,
                    name: u.Name,
                    surname: u.Surname,
                    email: u.Email,
                    phone: u.Phone,
                }));
                setUsers(mapped);
            } else {
                console.warn("‚ùå Nieoczekiwana struktura po dodaniu u≈ºytkownika:", updated);
            }
        } catch (error: any) {
            console.error("‚ùå B≈ÇƒÖd dodawania u≈ºytkownika:", error);
        }
    };

    const handleModify = async (userId: number) => {
        const email = prompt("Nowy Email:");
        const name = prompt("Nowe Imiƒô:");
        const surname = prompt("Nowe Nazwisko:");
        const phone = prompt("Nowy Telefon:");
        const accountActive = confirm("Czy konto ma byƒá aktywne?");

        // Budujemy obiekt `data` dok≈Çadnie wed≈Çug tego, co funkcja modifyUser umie wstawiƒá do nag≈Ç√≥wk√≥w:
        const data: any = {};
        if (email) data.email = email;
        if (name) data.name = name;
        if (surname) data.surname = surname;
        if (phone) data.phone = phone;
        data.accountActive = accountActive;

        try {
            // Tutaj wywo≈Çujemy modifyUser ‚Äì on doda do nag≈Ç√≥wk√≥w: Token, UserId, i ewentualne Email/Phone/Name/Surname/AccountActive
            await modifyUser(token!, userId, data);

            // Od≈õwie≈ºamy listƒô na nowo
            const updated = await listUsers(token!);
            console.log("‚úèÔ∏è RAW response po modyfikacji u≈ºytkownika:", updated);

            if (updated?.array && Array.isArray(updated.array)) {
                const mapped: User[] = updated.array.map((u: any) => ({
                    id: u.ID,
                    name: u.Name,
                    surname: u.Surname,
                    email: u.Email,
                    phone: u.Phone,
                }));
                setUsers(mapped);
            } else if (Array.isArray(updated)) {
                const mapped: User[] = updated.map((u: any) => ({
                    id: u.ID,
                    name: u.Name,
                    surname: u.Surname,
                    email: u.Email,
                    phone: u.Phone,
                }));
                setUsers(mapped);
            } else {
                console.warn(
                    "‚ùå Nieoczekiwana struktura po modyfikacji u≈ºytkownika:",
                    updated
                );
            }
        } catch (error: any) {
            console.error("‚ùå B≈ÇƒÖd modyfikacji u≈ºytkownika:", error);
        }
    };

    return (
        <div className="page-card mt-4 mb-4" style={{ maxWidth: 720 }}>
            <h2 className="mb-4">ZarzƒÖdzanie u≈ºytkownikami</h2>

            <button className="primary mb-4" onClick={handleAdd}>
                Dodaj u≈ºytkownika
            </button>

            <table>
                <thead>
                <tr>
                    <th>ID</th>
                    <th>Email</th>
                    <th>Imiƒô</th>
                    <th>Nazwisko</th>
                    <th>Telefon</th>
                    <th>Akcje</th>
                </tr>
                </thead>
                <tbody>
                {users.map((u) => (
                    <tr key={u.id}>
                        <td>{u.id}</td>
                        <td>{u.email}</td>
                        <td>{u.name}</td>
                        <td>{u.surname}</td>
                        <td>{u.phone}</td>
                        <td>
                            <button
                                className="secondary"
                                onClick={() => handleModify(u.id)}
                            >
                                Modyfikuj
                            </button>
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>
        </div>
    );
};

export default UsersPage;

